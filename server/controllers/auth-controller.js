// contoller is a part of a code that handles the logic of the application

// when ever you r usinf async better to include try catch in there
const User = require("../models/user-schema")
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const { validationResult } = require("express-validator");

const JWT_SECRET = process.env.JWT_SECRET;

const home = async (req, res) => {
  try {
    res.status(200).send("Hello World Auth Page by contollers!!")
  } catch (error) {
    console.log(error)
  }
}





// all mongo db queries should have await 

const register = async (req, res) => {
  const errors = validationResult(req);
  // If there are validation errors, return them
  console.log("Validation errors:", errors.array());
  console.log("Raw password from request:", req.body.password);

  // If there are validation errors, return them
  if (!errors.isEmpty()) {
    return res.status(400).json({
      success: false,
      errors: errors.array()
    });
  }

  try {
    const data = req.body;
    console.log(data)

    const userExists = await User.findOne({ email: data.email });

    if (userExists) {
      // we need to return this...as only one resposne can be sent once
      return res.status(409).json({ msg: "User Already Exists" })
    }

    // if user doesnt exists hash the password and then insert it
    const salt = await bcrypt.genSalt(10);
    const hashPasssword = await bcrypt.hash(data.password, salt);
    // updating the password with the hashed password
    data.password = hashPasssword;

    // Create the user
    const createdUser = await User.create(data)

    // JWT for token creation (Generate JWT token)
    const token = jwt.sign(
      { id: createdUser._id.toString() },
      JWT_SECRET,
      { expiresIn: "7d" } // Token expires in 7 days
    );

    res.status(201).json({
      msg: "User Registered Successfully",
      token,
      userId: createdUser._id.toString()
    });


  } catch (error) {
    res.status(400).send({ msg: "Page not Found Here in the server !!" })
  }

}




// user login logic

const login = async (req, res) => {
  const errors = validationResult(req);

  // If there are validation errors, return them
  if (!errors.isEmpty()) {
    return res.status(400).json({
      success: false,
      errors: errors.array()
    });
  }
  try {
    // email & password
    const data = req.body;
    console.log(data)
    // this will return the complete data for that particualr ID
    const userExists = await User.findOne({ email: data.email })

    if (!userExists) {
      return res.status(400).send({ msg: "Invalid Credentials" })
    }

    // comapre password

    const validUser = await bcrypt.compare(data.password, userExists.password);

    if (validUser) {
      // JWT for token creation (Generate JWT token)
      const token = jwt.sign(
        { id: userExists._id.toString() },
        JWT_SECRET,
        { expiresIn: "7d" } // 7 days is a good balance
      );
      

      res.status(200).json({
        msg: "User Login Successfully",
        token,
        userId: userExists._id.toString()
      });
    }
    else {
      // 401 Unauthorized Error
      res.status(401).json({ msg: "Invalid Email/Password" })
    }

  } catch (error) {
    res.status(400).send({ msg: "Page not Found Here in the server !!" })
  }
}




// for sendig teh user details to the frontend  server
const getUserDetails = async (req, res) => {
  try {
    const authHeader = req.headers.authorization; // Get token from headers

    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return res.status(401).json({ message: "Unauthorized: No token provided" });
    }

    console.log("Header:", authHeader);

    const token = authHeader.replace("Bearer ", "").trim(); // Remove 'Bearer ' and trim spaces
    console.log("Token:", token);

    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET); // Ensure you are using the correct secret key
    const userId = decoded.id;
    console.log("User ID:", userId);

    // Fetch user data from DB
    const userData = await User.findById(userId).select("-password"); // Exclude password

    if (!userData) {
      return res.status(404).json({ message: "User not found" });
    }

    console.log("User Data:", userData);

    res.json(userData);
  } catch (error) {
    console.error("Error verifying token:", error);
    res.status(401).json({ message: "Invalid or expired token" });
  }
};




module.exports = { home, register, login, getUserDetails }




// User Registration Logic :
// - get the user data from the req.body
// - check the email existance
// - if not exists hash the password and insert it



// JWT - for Auththentication & Authorization
// -it has 3 components (Header , Payload ,Signature )
// -Header : meta data of the token
// -payload : the data
// -signature : to ensure the message wasnt changed

// -Token is generated by server
// -these are not stored in Database and not sent on the server ... they are stored as either cookies or either LocalStorage (i.e stored in client side)

// -send succcessfull message , token and string converted id from teh database



// The jwt.sign() method has 3 parameters:

// Parameter -	Purpose
// payload	-This contains the data you want to encode in the token (like userId).
// secretKey-	A secret key known only to your server (JWT_SECRET). This key is used to sign (encrypt) the token.
// options-	Additional configurations like token expiration time (expiresIn).